; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.pthread_attr_t = type { i64, [48 x i8] }

@count = global i32 1, align 4, !dbg !0
@.str = private unnamed_addr constant [14 x i8] c"Last Value %d\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"Thread ID: %d, count = %d : address : %p \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define i32 @main() #0 !dbg !13 {
entry:
  %retval = alloca i32, align 4
  %tid = alloca [10 x i64], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata [10 x i64]* %tid, metadata !16, metadata !23), !dbg !24
  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !23), !dbg !26
  store i32 0, i32* %i, align 4, !dbg !27
  br label %for.cond, !dbg !29

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !30
  %cmp = icmp slt i32 %0, 10, !dbg !32
  br i1 %cmp, label %for.body, label %for.end, !dbg !33

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i64], [10 x i64]* %tid, i32 0, i32 0, !dbg !34
  %1 = load i32, i32* %i, align 4, !dbg !36
  %idx.ext = sext i32 %1 to i64, !dbg !37
  %add.ptr = getelementptr inbounds i64, i64* %arraydecay, i64 %idx.ext, !dbg !37
  %2 = load i32, i32* %i, align 4, !dbg !38
  %conv = sext i32 %2 to i64, !dbg !39
  %3 = inttoptr i64 %conv to i8*, !dbg !39
  %call = call i32 @pthread_create(i64* %add.ptr, %union.pthread_attr_t* null, i8* (i8*)* @ThreadCode, i8* %3) #5, !dbg !40
  br label %for.inc, !dbg !41

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !42
  %inc = add nsw i32 %4, 1, !dbg !42
  store i32 %inc, i32* %i, align 4, !dbg !42
  br label %for.cond, !dbg !43, !llvm.loop !44

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* @count, align 4, !dbg !46
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 %5), !dbg !47
  call void @pthread_exit(i8* null) #6, !dbg !48
  unreachable, !dbg !48

return:                                           ; No predecessors!
  %6 = load i32, i32* %retval, align 4, !dbg !49
  ret i32 %6, !dbg !49
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @ThreadCode(i8* %arg) #0 !dbg !50 {
entry:
  %retval = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %threadId = alloca i32, align 4
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !53, metadata !23), !dbg !54
  %0 = load i32, i32* @count, align 4, !dbg !55
  %add = add nsw i32 %0, 1, !dbg !55
  store i32 %add, i32* @count, align 4, !dbg !55
  call void @llvm.dbg.declare(metadata i32* %threadId, metadata !56, metadata !23), !dbg !57
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !58
  %2 = ptrtoint i8* %1 to i32, !dbg !59
  store i32 %2, i32* %threadId, align 4, !dbg !57
  %3 = load i32, i32* %threadId, align 4, !dbg !60
  %4 = load i32, i32* @count, align 4, !dbg !61
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %3, i32 %4, i32* @count), !dbg !62
  %5 = load i8*, i8** %retval, align 8, !dbg !63
  ret i8* %5, !dbg !63
}

; Function Attrs: nounwind
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: noreturn
declare void @pthread_exit(i8*) #4

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn }

!llvm.dbg.cu = !{!2}
!llvm.ident = !{!9}
!llvm.module.flags = !{!10, !11, !12}

!0 = !DIGlobalVariableExpression(var: !1)
!1 = distinct !DIGlobalVariable(name: "count", scope: !2, file: !3, line: 12, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 5.0.0 (tags/RELEASE_500/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !8)
!3 = !DIFile(filename: "sample.c", directory: "/home/bernard/Workspace/Project-LLVM/Bayesian-FaultInjector/ErrorInjector/apps")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!0}
!9 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!10 = !{i32 2, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 24, type: !14, isLocal: false, isDefinition: true, scopeLine: 24, isOptimized: false, unit: !2, variables: !4)
!14 = !DISubroutineType(types: !15)
!15 = !{!7}
!16 = !DILocalVariable(name: "tid", scope: !13, file: !3, line: 26, type: !17)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 640, elements: !21)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "pthread_t", file: !19, line: 60, baseType: !20)
!19 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h", directory: "/home/bernard/Workspace/Project-LLVM/Bayesian-FaultInjector/ErrorInjector/apps")
!20 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!21 = !{!22}
!22 = !DISubrange(count: 10)
!23 = !DIExpression()
!24 = !DILocation(line: 26, column: 11, scope: !13)
!25 = !DILocalVariable(name: "i", scope: !13, file: !3, line: 27, type: !7)
!26 = !DILocation(line: 27, column: 5, scope: !13)
!27 = !DILocation(line: 28, column: 6, scope: !28)
!28 = distinct !DILexicalBlock(scope: !13, file: !3, line: 28, column: 1)
!29 = !DILocation(line: 28, column: 5, scope: !28)
!30 = !DILocation(line: 28, column: 9, scope: !31)
!31 = distinct !DILexicalBlock(scope: !28, file: !3, line: 28, column: 1)
!32 = !DILocation(line: 28, column: 10, scope: !31)
!33 = !DILocation(line: 28, column: 1, scope: !28)
!34 = !DILocation(line: 30, column: 17, scope: !35)
!35 = distinct !DILexicalBlock(scope: !31, file: !3, line: 29, column: 1)
!36 = !DILocation(line: 30, column: 21, scope: !35)
!37 = !DILocation(line: 30, column: 20, scope: !35)
!38 = !DILocation(line: 30, column: 47, scope: !35)
!39 = !DILocation(line: 30, column: 39, scope: !35)
!40 = !DILocation(line: 30, column: 2, scope: !35)
!41 = !DILocation(line: 32, column: 1, scope: !35)
!42 = !DILocation(line: 28, column: 20, scope: !31)
!43 = !DILocation(line: 28, column: 1, scope: !31)
!44 = distinct !{!44, !33, !45}
!45 = !DILocation(line: 32, column: 1, scope: !28)
!46 = !DILocation(line: 34, column: 25, scope: !13)
!47 = !DILocation(line: 34, column: 2, scope: !13)
!48 = !DILocation(line: 36, column: 1, scope: !13)
!49 = !DILocation(line: 39, column: 1, scope: !13)
!50 = distinct !DISubprogram(name: "ThreadCode", scope: !3, file: !3, line: 14, type: !51, isLocal: true, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!51 = !DISubroutineType(types: !52)
!52 = !{!6, !6}
!53 = !DILocalVariable(name: "arg", arg: 1, scope: !50, file: !3, line: 14, type: !6)
!54 = !DILocation(line: 14, column: 31, scope: !50)
!55 = !DILocation(line: 15, column: 7, scope: !50)
!56 = !DILocalVariable(name: "threadId", scope: !50, file: !3, line: 16, type: !7)
!57 = !DILocation(line: 16, column: 6, scope: !50)
!58 = !DILocation(line: 16, column: 21, scope: !50)
!59 = !DILocation(line: 16, column: 15, scope: !50)
!60 = !DILocation(line: 17, column: 55, scope: !50)
!61 = !DILocation(line: 17, column: 64, scope: !50)
!62 = !DILocation(line: 17, column: 2, scope: !50)
!63 = !DILocation(line: 19, column: 1, scope: !50)
